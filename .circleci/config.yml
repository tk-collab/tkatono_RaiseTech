version: 2.1
orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@5.3.2
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.5.3

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/template.yml

  execute-cfn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION

      - run:
          name: Deploy CloudFormation Stack
          command: |
            aws cloudformation deploy --template-file cloudformation/template.yml --stack-name lecture13-stack --capabilities CAPABILITY_NAMED_IAM --parameter-overrides MyKeyName=$SSH_PRIVATE_KEY

  execute-ansible:
    executor: ansible-playbook/default
    environment:
      ANSIBLE_CONFIG: ansible/ansible.cfg
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:fMJBF9vXJhlQFfnoB1d7MfSPh0l39ybE2NYNqARw4nA"
      - ansible-playbook/install:
          version: 2.10.7
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
         name: Set Environment Vars
         command: |
           set -x
             EC2_PUBLIC_IP=$(aws cloudformation describe-stacks --stack-name lecture13-stack --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" --output text)
             echo "target ${EC2_PUBLIC_IP} ansible_connection=ssh ansible_user=ec2-user" > ansible/inventory.ini
#            AWS_RDS_PASSWORD=$(aws secretsmanager get-secret-value --secret-id raisetech-rds-secret --query 'SecretString' --output text | jq -r '.password')
#            AWS_RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name lecture13-stack --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)
#            AWS_S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name lecture13-stack --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
#            AWS_ALB_DNS_NAME=$(aws cloudformation describe-stacks --stack-name lecture13-stack --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" --output text)
#            echo "export AWS_RDS_PASSWORD=${AWS_RDS_PASSWORD}" >> $BASH_ENV
#            echo "export AWS_RDS_ENDPOINT=${AWS_RDS_ENDPOINT}" >> $BASH_ENV
#            echo "export AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}" >> $BASH_ENV
#            echo "export AWS_ALB_DNS_NAME=${AWS_ALB_DNS_NAME}" >> $BASH_ENV

      - run:
          name: Dump BASH_ENV
          command: cat $BASH_ENV

      - run:
          name: Run Ansible Playbook
          command: |
            ansible-playbook ansible/playbook.yml -i ansible/inventory.ini

  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      - ruby/install:
          version: 3.2.3
      - add_ssh_keys:
          fingerprints:
            - "SHA256:fMJBF9vXJhlQFfnoB1d7MfSPh0l39ybE2NYNqARw4nA"
      - run:
          name: Set ~/.ssh/config
          command: |
            mkdir -p ~/.ssh
            echo "Host target" >> ~/.ssh/config
            echo "HostName 54.178.150.33" >> ~/.ssh/config
            echo "User ec2-user" >> ~/.ssh/config
      - run:
          name: Setup Serverspec
          command: |
            cd serverspec
            bundle install
      - run:
          name: Execute Serverspec
          command: |
            cd serverspec
            bundle exec rake spec

workflows:
  lecture13-provisioning:
    jobs:
      - cfn-lint
      - execute-cfn:
          requires:
            - cfn-lint
      - execute-ansible:
          requires:
            - execute-cfn
      - execute-serverspec:
          requires:
            - execute-ansible
